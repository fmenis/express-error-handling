#!/usr/bin/env node

/**
 * Module dependencies.
 */

const logger = require('../utils/logger.util');
const app = require('../app');
const debug = require('debug')('test:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    logger.info(`Server up and running at port ${port} (${process.env.NODE_ENV})`);
}


/**
 * Error events
 */
// exteption not handled
process.on('uncaughtException', err => {
	logger.error(err);
    process.exit(1);
});

// reject promise not handled
process.on('unhandledRejection', (reason, promise) => {
    logger.error(reason);
    process.exit(1);
});


/**
 * Termination events
 */
process.on('SIGTERM', name => {
    logger.info(`Process recived a ${name} signal`);
    process.exit(0);
});

process.on('SIGINT', name => {
    // like ctrl+c
    logger.info(`Process recived a ${name} signal`);
    process.exit(0);
});


/**
 * Exit events
 */
// Not emitted conditions causing explicit termination,s calling process.exit() or uncaught exceptions.
process.on('beforeExit', code => {
    // Async operations can be done
	logger.info(`Process beforeExit event with code: ${code}`);
});

// Only sync operations
process.on('exit', code => {
    logger.info(`Process exit with code: ${code}`);//##TODO non riesce a scrivere
});
